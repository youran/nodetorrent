const EE = require('events').EventEmitter;
const querystring = require('querystring');
const http = require('http');
const bencode = require('bencode');
const bitfield = require("bitfield");

var worker = new EE();
var maxPeerNum = 30;
var statistics = {uploaded: 0, downloaded: 0, left: 0};
var trackerStatus = [];
var peerList = [];
var bitField;

var calcBitFieldSize = (piece, total) => {
	return Math.ceil(total / piece);
};

var getTrackers = (obj) => {	// get trackers from 'announce' and 'announce-list'
	var trackerList = [];

	trackerList.push(obj.announce.toString());
	
	if (!obj['announce-list']) {	// BEP-0012: Multitracker Metadata Extension
		for (let url of obj['announce-list']) {
			trackerList.push(url[0].toString());
		}
	}

	return trackerList;
};

var constructReqParams = (obj, listenPort, event, trackerId) => {
	var qs = '';
	var	requestParam = {
		info_hash: querystring.escape(obj.info_hash.toString('binary')),
		peer_id: querystring.escape('-YR0001-000000000000'),	//TODO peer_id generator
		port: listenPort,
		uploaded: statistics.uploaded,
		downloaded: statistics.downloaded,
		left: statistics.left,
		compact: 0,	//TODO support for compact response
		numwant: maxPeerNum
	};

	if (event) {
		requestParam.event = event;
	}

	if (trackerId) {
		requestParam.trackerid = trackerId;
	}

	qs = querystring.stringify(requestParam);
	return qs;
};

var connectToTracker = (trackerList, params) => {
	var tracker = trackerList[0];	//TODO support for Multitracker

	http.get(tracker, (res) => {	// currently only http trackers are supported
		var body = [];
		console.log(`tracker response: ${res.statusCode}`);

		// parse response body
		res.on('data', function (chunk) {
			body.push(chunk);
		})
		.on('end', () => {
			let buf = Buffer.concat(body);
			bencode.decode(buf, (err, obj) => {
				processTrackerResponse(obj);
			});
		});
	})
	.on('error', (e) => {
		console.log(`tracker error: ${e.message}`);
	});

};

var processTrackerResponse = (obj) => {
	var res = {};
	if (obj['failure reason'] !== undefined) {
		worker.emit('T_FAIL', obj);
		return;
	}

	if (obj['warning message'] !== undefined) {
		worker.emit('T_WARN', obj);
	} else {
		worker.emit('T_GET', obj);
	}


};

var mainEventLoop = () => {

};

var download = (obj, port) => {
	var trackerList, params;

	statistics.left = obj.totalBytes;
	bitField = new bitfield(calcBitFieldByteSize(obj.info['piece length'], obj.totalBytes));
	trackerList = getTrackers(obj);
	params = constructReqParams(obj, port, null, null);
	connectToTracker(trackerList, params);	// first time connecting to tracker
};

module.exports.download = download;